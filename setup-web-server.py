#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üõ†Ô∏è –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Whisper
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def run_command(cmd, description=""):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    print(f"üì¶ {description}..." if description else f"üöÄ {cmd}")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, cwd='.', encoding='utf-8')
        if result.returncode == 0:
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def check_venv():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    venv_path = Path(".venv")
    if venv_path.exists():
        print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ")
        return True
    else:
        print("‚ùå –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Flask"""
    print("\n" + "="*50)
    print("üì¶ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô WEB-–°–ï–†–í–ï–†–ê")
    print("="*50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    if os.name == 'nt':  # Windows
        python_path = ".venv\\Scripts\\python.exe"
        pip_path = ".venv\\Scripts\\pip.exe"
    else:  # Linux/Mac
        python_path = ".venv/bin/python"
        pip_path = ".venv/bin/pip"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ pip
    if not os.path.exists(pip_path):
        print("üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pip...")
        run_command(f'"{python_path}" -m ensurepip --upgrade', "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ pip")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Flask –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    dependencies = [
        "flask==2.3.3",
        "werkzeug==2.3.7", 
        "python-multipart==0.0.6",
        "librosa>=0.10.0",
        "scikit-learn>=1.0.0",
        "soundfile>=0.10.0",
        "scipy>=1.7.0"
    ]
    
    for dep in dependencies:
        if not run_command(f'"{python_path}" -m pip install {dep}', f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}"):
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            run_command(f'"{python_path}" -m easy_install {dep.split("==")[0]}', f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ {dep}")

def create_app_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    print("\n" + "="*50)
    print("üìÅ –°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–û–í WEB-–°–ï–†–í–ï–†–ê")
    print("="*50)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É templates –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    templates_dir = Path("templates")
    templates_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º app.py —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    app_content = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è OpenAI Whisper —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏
"""

import os
import sys
import glob
import zipfile
import shutil
import subprocess
import threading
import time
from pathlib import Path

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
import sys
import io
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8')

try:
    from flask import Flask, render_template, request, send_file, jsonify, flash, redirect, url_for
    from werkzeug.utils import secure_filename
    print("‚úÖ Flask –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Flask: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install flask werkzeug python-multipart")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
app.secret_key = 'whisper-web-secret-key-2024'
app.config['MAX_CONTENT_LENGTH'] = 200 * 1024 * 1024  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 200MB

# –ü–∞–ø–∫–∏
UPLOAD_FOLDER = 'audio'
RESULTS_FOLDER = 'results'
ALLOWED_EXTENSIONS = {'wav', 'mp3', 'm4a'}

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(RESULTS_FOLDER, exist_ok=True)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
processing_status = {
    'is_processing': False,
    'start_time': None,
    'current_file': None
}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def cleanup_folders():
    """–û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–æ–∫ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    try:
        # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫–∏
        for folder in [UPLOAD_FOLDER, RESULTS_FOLDER]:
            for item in os.listdir(folder):
                item_path = os.path.join(folder, item)
                if os.path.isfile(item_path):
                    os.remove(item_path)
        print("‚úÖ –ü–∞–ø–∫–∏ –æ—á–∏—â–µ–Ω—ã")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–æ–∫: {e}")
        return False

def create_zip_archive():
    """–°–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    try:
        # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        result_files = []
        for ext in ['.txt', '.srt', '.vtt', '.json']:
            result_files.extend(glob.glob(os.path.join(RESULTS_FOLDER, f'*{ext}')))
        
        if not result_files:
            print("‚ùå –§–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return None
        
        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
        zip_filename = "results.zip"
        zip_path = os.path.join(RESULTS_FOLDER, zip_filename)
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for result_file in result_files:
                zipf.write(result_file, os.path.basename(result_file))
        
        print(f"‚úÖ ZIP –∞—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_filename}")
        return zip_filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ZIP –∞—Ä—Ö–∏–≤–∞: {e}")
        return None

def process_audio():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ"""
    global processing_status
    
    try:
        processing_status['is_processing'] = True
        processing_status['start_time'] = time.time()
        
        print("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ audio...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ñ–æ—Ä–º—ã
        enable_diarization = request.form.get('diarization', 'false').lower() == 'true'
        n_speakers = int(request.form.get('n_speakers', 2))
        
        print(f"üé§ –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è: {'–í–ö–õ–Æ–ß–ï–ù–ê' if enable_diarization else '–í–´–ö–õ–Æ–ß–ï–ù–ê'}")
        if enable_diarization:
            print(f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–≤–æ—Ä—è—â–∏—Ö: {n_speakers}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        cmd = [
            sys.executable, 'whisper_transcribe.py',
            UPLOAD_FOLDER,
            'large',  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º large –º–æ–¥–µ–ª—å
            RESULTS_FOLDER,
            str(enable_diarization).lower(),
            str(n_speakers)
        ]
        
        print(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
        result = subprocess.run(cmd, capture_output=True, text=True, cwd='.', encoding='utf-8')
        
        if result.returncode == 0:
            print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            zip_filename = create_zip_archive()
            
            processing_status['is_processing'] = False
            processing_status['current_file'] = None
            
            if zip_filename:
                return True, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
            else:
                return False, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞"
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.stderr}")
            processing_status['is_processing'] = False
            return False, f"–û—à–∏–±–∫–∞: {result.stderr}"
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        processing_status['is_processing'] = False
        return False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}"

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    processed_files = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞
    zip_files = glob.glob(os.path.join(RESULTS_FOLDER, '*.zip'))
    for zip_file in zip_files:
        processed_files.append({
            'name': os.path.splitext(os.path.basename(zip_file))[0],
            'zip_path': os.path.basename(zip_file),
            'size': os.path.getsize(zip_file),
            'is_diarized': '_diarized' in os.path.basename(zip_file)
        })
    
    # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ ZIP –Ω–µ—Ç
    if not processed_files:
        for result_file in glob.glob(os.path.join(RESULTS_FOLDER, '*')):
            if not result_file.endswith('.zip'):
                processed_files.append({
                    'name': os.path.splitext(os.path.basename(result_file))[0],
                    'zip_path': os.path.basename(result_file),
                    'size': os.path.getsize(result_file),
                    'is_diarized': '_diarized' in os.path.basename(result_file)
                })
    
    return render_template('index.html', 
                         processed_files=processed_files,
                         is_processing=processing_status['is_processing'])

@app.route('/upload', methods=['POST'])
def upload_file():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è)"""
    global processing_status
    
    if 'files' not in request.files:
        flash('–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã', 'error')
        return redirect('/')
    
    files = request.files.getlist('files')
    if not files or files[0].filename == '':
        flash('–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã', 'error')
        return redirect('/')
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
    enable_diarization = request.form.get('diarization', 'false').lower() == 'true'
    n_speakers = int(request.form.get('n_speakers', 2))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞
    if processing_status['is_processing']:
        flash('–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.', 'warning')
        return redirect('/')
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    if not cleanup_folders():
        flash('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏', 'error')
        return redirect('/')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    saved_files = []
    for file in files:
        if file and allowed_file(file.filename):
            filename = secure_filename(file.filename)
            file_path = os.path.join(UPLOAD_FOLDER, filename)
            file.save(file_path)
            saved_files.append(filename)
            print(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    
    if not saved_files:
        flash('–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', 'error')
        return redirect('/')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
    def process_task():
        success, message = process_audio()
        if success:
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {message}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {message}")
    
    threading.Thread(target=process_task, daemon=True).start()
    
    diarization_info = " —Å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–µ–π" if enable_diarization else ""
    flash(f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(saved_files)} —Ñ–∞–π–ª–æ–≤. –û–±—Ä–∞–±–æ—Ç–∫–∞{diarization_info} –Ω–∞—á–∞—Ç–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.', 'success')
    return redirect('/')

@app.route('/download/<filename>')
def download_file(filename):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    file_path = os.path.join(RESULTS_FOLDER, filename)
    if os.path.exists(file_path):
        return send_file(file_path, as_attachment=True)
    flash('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
    return redirect('/')

@app.route('/cleanup', methods=['POST'])
def cleanup_files():
    """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    global processing_status
    
    if processing_status['is_processing']:
        flash('–ù–µ–ª—å–∑—è –æ—á–∏—â–∞—Ç—å –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', 'warning')
        return redirect('/')
    
    if cleanup_folders():
        flash('–í—Å–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã', 'success')
    else:
        flash('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ñ–∞–π–ª–æ–≤', 'error')
    return redirect('/')

@app.route('/status')
def status():
    """–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    audio_files = len([f for f in os.listdir(UPLOAD_FOLDER) if os.path.isfile(os.path.join(UPLOAD_FOLDER, f))])
    result_files = len([f for f in os.listdir(RESULTS_FOLDER) if os.path.isfile(os.path.join(RESULTS_FOLDER, f)) and not f.endswith('.zip')])
    zip_files = len([f for f in os.listdir(RESULTS_FOLDER) if f.endswith('.zip')])
    
    return jsonify({
        'audio_files': audio_files,
        'result_files': result_files,
        'zip_files': zip_files,
        'is_processing': processing_status['is_processing'],
        'processing_time': time.time() - processing_status['start_time'] if processing_status['start_time'] else 0,
        'ready': result_files > 0 or zip_files > 0
    })

if __name__ == '__main__':
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ Whisper...")
    print("üìÅ –ó–∞–≥—Ä—É–∑–∫–∏:", os.path.abspath(UPLOAD_FOLDER))
    print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:", os.path.abspath(RESULTS_FOLDER))
    print("üöÄ –°–µ—Ä–≤–µ—Ä: http://localhost:5000")
    print("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C")
    
    app.run(debug=True, host='0.0.0.0', port=5000)
'''

    with open("app.py", "w", encoding="utf-8") as f:
        f.write(app_content)
    print("‚úÖ app.py —Å–æ–∑–¥–∞–Ω (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")

    # –°–æ–∑–¥–∞–µ–º index.html
    index_content = '''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Whisper Web Interface</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body { background: #f8f9fa; }
        .card { transition: transform 0.2s; }
        .card:hover { transform: translateY(-2px); }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
        .processing { animation: pulse 2s infinite; }
        .file-list { max-height: 200px; overflow-y: auto; }
        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.7; }
            100% { opacity: 1; }
        }
        .diarization-settings {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid #dee2e6;
        }
        
        .speaker-badge {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: bold;
            margin-right: 5px;
        }

        .speaker-1 { background: #ff6b6b; color: white; }
        .speaker-2 { background: #4ecdc4; color: white; }
        .speaker-3 { background: #45b7d1; color: white; }
        .speaker-4 { background: #f9ca24; color: black; }
        .speaker-5 { background: #6c5ce7; color: white; }
    </style>
</head>
<body>
    <div class="header text-white py-4 mb-4">
        <div class="container">
            <h1 class="display-4">üéôÔ∏è Whisper Web Interface</h1>
            <p class="lead">–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏</p>
            <small>–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å Large –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏</small>
        </div>
    </div>

    <div class="container">
        <!-- –§–æ—Ä–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ -->
        <div class="card shadow-lg mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0"><i class="fas fa-upload me-2"></i>–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤</h5>
            </div>
            <div class="card-body">
                <form action="/upload" method="post" enctype="multipart/form-data" id="uploadForm">
                    <div class="mb-3">
                        <label class="form-label">–ê—É–¥–∏–æ—Ñ–∞–π–ª—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):</label>
                        <input class="form-control" type="file" name="files" accept=".mp3,.wav,.m4a" multiple required>
                        <div class="form-text">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP3, WAV, M4A (–º–∞–∫—Å. 200MB –≤—Å–µ–≥–æ)</div>
                    </div>
                    
                    <!-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏ -->
                    <div class="diarization-settings">
                        <div class="form-check form-switch mb-3">
                            <input class="form-check-input" type="checkbox" id="diarizationToggle" name="diarization" value="true">
                            <label class="form-check-label" for="diarizationToggle">
                                üé§ –í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ–≤–æ—Ä—è—â–∏–º
                            </label>
                        </div>
                        
                        <div class="form-group" id="speakersGroup" style="display: none;">
                            <label class="form-label">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–≤–æ—Ä—è—â–∏—Ö:</label>
                            <select class="form-select" name="n_speakers" id="nSpeakers">
                                <option value="2">2 —á–µ–ª–æ–≤–µ–∫–∞</option>
                                <option value="3">3 —á–µ–ª–æ–≤–µ–∫–∞</option>
                                <option value="4">4 —á–µ–ª–æ–≤–µ–∫–∞</option>
                                <option value="5">5 —á–µ–ª–æ–≤–µ–∫</option>
                            </select>
                            <div class="form-text">–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ 20-30%</div>
                        </div>
                    </div>
                    
                    <div class="alert alert-warning mt-3" id="timeWarning" style="display: none;">
                        ‚è±Ô∏è <strong>–í–Ω–∏–º–∞–Ω–∏–µ!</strong> –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ 2-3 —Ä–∞–∑–∞.
                        –î–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 5MB —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∞—Ç—å –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—é.
                    </div>
                    
                    <button type="submit" class="btn btn-primary btn-lg w-100 mt-3" id="submitBtn" {% if is_processing %}disabled{% endif %}>
                        {% if is_processing %}‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...{% else %}üöÄ –ù–∞—á–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É{% endif %}
                    </button>
                </form>
            </div>
        </div>

        <!-- –°–æ–æ–±—â–µ–Ω–∏—è -->
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else 'success' if category == 'success' else 'warning' }} alert-dismissible fade show">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}

        <!-- –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ -->
        <div class="card shadow-lg mb-4" id="statusCard" style="display: none;">
            <div class="card-header bg-warning text-dark">
                <h5 class="mb-0">‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...</h5>
            </div>
            <div class="card-body text-center">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p id="statusText">–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.</p>
                <div class="progress mb-2">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" style="width: 100%"></div>
                </div>
                <small class="text-muted">–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏</small>
            </div>
        </div>

        <!-- –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã -->
        {% if processed_files %}
        <div class="card shadow-lg">
            <div class="card-header bg-success text-white">
                <h5 class="mb-0">‚úÖ –ì–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã</h5>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>–ò–º—è —Ñ–∞–π–ª–∞</th>
                                <th>–†–∞–∑–º–µ—Ä</th>
                                <th>–¢–∏–ø</th>
                                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                                    </thead>
                        <tbody>
                            {% for file in processed_files %}
                            <tr>
                                <td>
                                    {{ file.name }}
                                    {% if file.is_diarized %}
                                    <span class="badge bg-info">üé§ –î–∏–∞—Ä–∏–∑–∞—Ü–∏—è</span>
                                    {% endif %}
                                </td>
                                <td>{{ (file.size / 1024)|round(2) }} KB</td>
                                <td>
                                    {% if file.zip_path.endswith('.zip') %}
                                    <span class="badge bg-primary">ZIP –∞—Ä—Ö–∏–≤</span>
                                    {% else %}
                                    <span class="badge bg-secondary">–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª</span>
                                    {% endif %}
                                </td>
                                <td>
                                    <a href="/download/{{ file.zip_path }}" class="btn btn-success btn-sm">
                                        üì• –°–∫–∞—á–∞—Ç—å
                                    </a>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        {% endif %}

        <!-- –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ -->
        <div class="text-center mt-4">
            <form action="/cleanup" method="post" onsubmit="return confirm('–£–¥–∞–ª–∏—Ç—å –í–°–ï —Ñ–∞–π–ª—ã?')">
                <button type="submit" class="btn btn-outline-danger" {% if is_processing %}disabled{% endif %}>
                    üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã
                </button>
            </form>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let checkInterval;
        
        // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
        async function checkProcessingStatus() {
            try {
                const response = await fetch('/status');
                const data = await response.json();
                
                console.log('–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:', data);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
                if (data.is_processing) {
                    const minutes = Math.floor(data.processing_time / 60);
                    const seconds = Math.floor(data.processing_time % 60);
                    document.getElementById('statusText').textContent = 
                        `–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${minutes}–º ${seconds}—Å`;
                }
                
                // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if (!data.is_processing && data.ready) {
                    clearInterval(checkInterval);
                    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
                    location.reload();
                }
                
                // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã)
                if (!data.is_processing && !data.ready && data.processing_time > 120) {
                    clearInterval(checkInterval);
                    console.log('–í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
                    location.reload();
                }
                
            } catch (error) {
                console.log('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã
        document.getElementById('uploadForm').addEventListener('submit', function() {
            document.getElementById('statusCard').style.display = 'block';
            document.getElementById('submitBtn').disabled = true;
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
            checkInterval = setInterval(checkProcessingStatus, 3000);
            
            // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            setTimeout(checkProcessingStatus, 1000);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–µ—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞)
        document.addEventListener('DOMContentLoaded', function() {
            {% if is_processing %}
            document.getElementById('statusCard').style.display = 'block';
            document.getElementById('submitBtn').disabled = true;
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞
            checkInterval = setInterval(checkProcessingStatus, 3000);
            checkProcessingStatus();
            {% endif %}
        });

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–∞—Ö
        document.querySelector('input[type="file"]').addEventListener('change', function(e) {
            const files = e.target.files;
            let totalSize = 0;
            
            for (let i = 0; i < files.length; i++) {
                totalSize += files[i].size;
            }
            
            if (totalSize > 100 * 1024 * 1024) { // 100MB
                if (!confirm(`–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: ${(totalSize / 1024 / 1024).toFixed(1)}MB. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?`)) {
                    e.target.value = '';
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if (files.length > 0) {
                let fileList = '–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ' + files.length;
                if (files.length <= 5) {
                    fileList += ' (';
                    for (let i = 0; i < files.length; i++) {
                        if (i > 0) fileList += ', ';
                        fileList += files[i].name;
                    }
                    fileList += ')';
                }
                console.log(fileList);
            }
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–∏–ª—Å—è
        setInterval(() => {
            if (document.getElementById('statusCard').style.display === 'block') {
                checkProcessingStatus();
            }
        }, 30000);

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏–∏
        document.getElementById('diarizationToggle').addEventListener('change', function(e) {
            const speakersGroup = document.getElementById('speakersGroup');
            const timeWarning = document.getElementById('timeWarning');
            speakersGroup.style.display = e.target.checked ? 'block' : 'none';
            timeWarning.style.display = e.target.checked ? 'block' : 'none';
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        document.getElementById('diarizationToggle').addEventListener('change', function(e) {
            if (e.target.checked) {
                const files = document.querySelector('input[type="file"]').files;
                if (files.length > 0) {
                    let totalSize = 0;
                    for (let i = 0; i < files.length; i++) {
                        totalSize += files[i].size;
                    }
                    if (totalSize > 50 * 1024 * 1024) { // 50MB
                        if (!confirm('–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')) {
                            e.target.checked = false;
                            document.getElementById('speakersGroup').style.display = 'none';
                            document.getElementById('timeWarning').style.display = 'none';
                        }
                    }
                }
            }
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage
        document.addEventListener('DOMContentLoaded', function() {
            const diarizationToggle = document.getElementById('diarizationToggle');
            const nSpeakers = document.getElementById('nSpeakers');
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const savedDiarization = localStorage.getItem('diarizationEnabled') === 'true';
            const savedNSpeakers = localStorage.getItem('nSpeakers') || '2';
            
            diarizationToggle.checked = savedDiarization;
            nSpeakers.value = savedNSpeakers;
            
            if (savedDiarization) {
                document.getElementById('speakersGroup').style.display = 'block';
                document.getElementById('timeWarning').style.display = 'block';
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            diarizationToggle.addEventListener('change', function() {
                localStorage.setItem('diarizationEnabled', this.checked);
            });
            
            nSpeakers.addEventListener('change', function() {
                localStorage.setItem('nSpeakers', this.value);
            });
        });
    </script>
</body>
</html>
'''

    with open("templates/index.html", "w", encoding="utf-8") as f:
        f.write(index_content)
    print("‚úÖ templates/index.html —Å–æ–∑–¥–∞–Ω")

def start_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    print("\n" + "="*50)
    print("üöÄ –ó–ê–ü–£–°–ö WEB-–°–ï–†–í–ï–†–ê")
    print("="*50)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ Python
    if os.name == 'nt':  # Windows
        python_path = ".venv\\Scripts\\python.exe"
    else:  # Linux/Mac
        python_path = ".venv/bin/python"
    
    if os.path.exists(python_path):
        print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä...")
        os.system(f'"{python_path}" app.py')
    else:
        print("‚ùå Python –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python app.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üõ†Ô∏è  –£–°–¢–ê–ù–û–í–ö–ê –ò –ó–ê–ü–£–°–ö WEB-–°–ï–†–í–ï–†–ê WHISPER")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not check_venv():
        print("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
        print("python -m venv .venv")
        print(".\.venv\Scripts\activate")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    install_dependencies()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
    create_app_files()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    start_server()

if __name__ == "__main__":
    main()
